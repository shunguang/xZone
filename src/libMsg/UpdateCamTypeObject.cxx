// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UpdateCamTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "UpdateCam.h"
#include "UpdateCamTypeObject.h"
#include <mutex>
#include <utility>
#include <sstream>
#include <fastdds/rtps/common/CdrSerialization.hpp>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>

using namespace eprosima::fastrtps::rtps;

void registerUpdateCamTypes()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                TypeObjectFactory *factory = TypeObjectFactory::get_instance();
                factory->add_type_object("UpdateCam", GetUpdateCamIdentifier(true),
                GetUpdateCamObject(true));
                factory->add_type_object("UpdateCam", GetUpdateCamIdentifier(false),
                GetUpdateCamObject(false));

            });
}



const TypeIdentifier* GetUpdateCamIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("UpdateCam", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetUpdateCamObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("UpdateCam", complete);
}

const TypeObject* GetUpdateCamObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("UpdateCam", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteUpdateCamObject();
    }
    //else
    return GetMinimalUpdateCamObject();
}

const TypeObject* GetMinimalUpdateCamObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("UpdateCam", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_rtspUrl;
    mst_rtspUrl.common().member_id(memberId++);
    mst_rtspUrl.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_rtspUrl.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_rtspUrl.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_rtspUrl.common().member_flags().IS_OPTIONAL(false);
    mst_rtspUrl.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_rtspUrl.common().member_flags().IS_KEY(false);
    mst_rtspUrl.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_rtspUrl.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

    MD5 rtspUrl_hash("rtspUrl");
    for(int i = 0; i < 4; ++i)
    {
        mst_rtspUrl.detail().name_hash()[i] = rtspUrl_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_rtspUrl);

    MinimalStructMember mst_valid;
    mst_valid.common().member_id(memberId++);
    mst_valid.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_valid.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_valid.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_valid.common().member_flags().IS_OPTIONAL(false);
    mst_valid.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_valid.common().member_flags().IS_KEY(false);
    mst_valid.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_valid.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 valid_hash("valid");
    for(int i = 0; i < 4; ++i)
    {
        mst_valid.detail().name_hash()[i] = valid_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_valid);

    MinimalStructMember mst_imgW;
    mst_imgW.common().member_id(memberId++);
    mst_imgW.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_imgW.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_imgW.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_imgW.common().member_flags().IS_OPTIONAL(false);
    mst_imgW.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_imgW.common().member_flags().IS_KEY(false);
    mst_imgW.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_imgW.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 imgW_hash("imgW");
    for(int i = 0; i < 4; ++i)
    {
        mst_imgW.detail().name_hash()[i] = imgW_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_imgW);

    MinimalStructMember mst_imgH;
    mst_imgH.common().member_id(memberId++);
    mst_imgH.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_imgH.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_imgH.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_imgH.common().member_flags().IS_OPTIONAL(false);
    mst_imgH.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_imgH.common().member_flags().IS_KEY(false);
    mst_imgH.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_imgH.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 imgH_hash("imgH");
    for(int i = 0; i < 4; ++i)
    {
        mst_imgH.detail().name_hash()[i] = imgH_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_imgH);

    MinimalStructMember mst_fpsNum;
    mst_fpsNum.common().member_id(memberId++);
    mst_fpsNum.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_fpsNum.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_fpsNum.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_fpsNum.common().member_flags().IS_OPTIONAL(false);
    mst_fpsNum.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_fpsNum.common().member_flags().IS_KEY(false);
    mst_fpsNum.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_fpsNum.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 fpsNum_hash("fpsNum");
    for(int i = 0; i < 4; ++i)
    {
        mst_fpsNum.detail().name_hash()[i] = fpsNum_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_fpsNum);

    MinimalStructMember mst_fpsDen;
    mst_fpsDen.common().member_id(memberId++);
    mst_fpsDen.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_fpsDen.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_fpsDen.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_fpsDen.common().member_flags().IS_OPTIONAL(false);
    mst_fpsDen.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_fpsDen.common().member_flags().IS_KEY(false);
    mst_fpsDen.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_fpsDen.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 fpsDen_hash("fpsDen");
    for(int i = 0; i < 4; ++i)
    {
        mst_fpsDen.detail().name_hash()[i] = fpsDen_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_fpsDen);

    MinimalStructMember mst_frmQueSz;
    mst_frmQueSz.common().member_id(memberId++);
    mst_frmQueSz.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_frmQueSz.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_frmQueSz.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_frmQueSz.common().member_flags().IS_OPTIONAL(false);
    mst_frmQueSz.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_frmQueSz.common().member_flags().IS_KEY(false);
    mst_frmQueSz.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_frmQueSz.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 frmQueSz_hash("frmQueSz");
    for(int i = 0; i < 4; ++i)
    {
        mst_frmQueSz.detail().name_hash()[i] = frmQueSz_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_frmQueSz);

    MinimalStructMember mst_detPyrLev;
    mst_detPyrLev.common().member_id(memberId++);
    mst_detPyrLev.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_detPyrLev.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_detPyrLev.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_detPyrLev.common().member_flags().IS_OPTIONAL(false);
    mst_detPyrLev.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_detPyrLev.common().member_flags().IS_KEY(false);
    mst_detPyrLev.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_detPyrLev.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 detPyrLev_hash("detPyrLev");
    for(int i = 0; i < 4; ++i)
    {
        mst_detPyrLev.detail().name_hash()[i] = detPyrLev_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_detPyrLev);

    MinimalStructMember mst_detMethodId;
    mst_detMethodId.common().member_id(memberId++);
    mst_detMethodId.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_detMethodId.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_detMethodId.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_detMethodId.common().member_flags().IS_OPTIONAL(false);
    mst_detMethodId.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_detMethodId.common().member_flags().IS_KEY(false);
    mst_detMethodId.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_detMethodId.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 detMethodId_hash("detMethodId");
    for(int i = 0; i < 4; ++i)
    {
        mst_detMethodId.detail().name_hash()[i] = detMethodId_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_detMethodId);

    MinimalStructMember mst_detNetworkId;
    mst_detNetworkId.common().member_id(memberId++);
    mst_detNetworkId.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_detNetworkId.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_detNetworkId.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_detNetworkId.common().member_flags().IS_OPTIONAL(false);
    mst_detNetworkId.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_detNetworkId.common().member_flags().IS_KEY(false);
    mst_detNetworkId.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_detNetworkId.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 detNetworkId_hash("detNetworkId");
    for(int i = 0; i < 4; ++i)
    {
        mst_detNetworkId.detail().name_hash()[i] = detNetworkId_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_detNetworkId);

    MinimalStructMember mst_detFrmsToSkip;
    mst_detFrmsToSkip.common().member_id(memberId++);
    mst_detFrmsToSkip.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_detFrmsToSkip.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_detFrmsToSkip.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_detFrmsToSkip.common().member_flags().IS_OPTIONAL(false);
    mst_detFrmsToSkip.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_detFrmsToSkip.common().member_flags().IS_KEY(false);
    mst_detFrmsToSkip.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_detFrmsToSkip.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    MD5 detFrmsToSkip_hash("detFrmsToSkip");
    for(int i = 0; i < 4; ++i)
    {
        mst_detFrmsToSkip.detail().name_hash()[i] = detFrmsToSkip_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_detFrmsToSkip);

    MinimalStructMember mst_mp4LocationAndPrefix;
    mst_mp4LocationAndPrefix.common().member_id(memberId++);
    mst_mp4LocationAndPrefix.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_mp4LocationAndPrefix.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_mp4LocationAndPrefix.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_mp4LocationAndPrefix.common().member_flags().IS_OPTIONAL(false);
    mst_mp4LocationAndPrefix.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_mp4LocationAndPrefix.common().member_flags().IS_KEY(false);
    mst_mp4LocationAndPrefix.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_mp4LocationAndPrefix.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

    MD5 mp4LocationAndPrefix_hash("mp4LocationAndPrefix");
    for(int i = 0; i < 4; ++i)
    {
        mst_mp4LocationAndPrefix.detail().name_hash()[i] = mp4LocationAndPrefix_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_mp4LocationAndPrefix);

    MinimalStructMember mst_subscriber_initalize_time;
    mst_subscriber_initalize_time.common().member_id(memberId++);
    mst_subscriber_initalize_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_subscriber_initalize_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_subscriber_initalize_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_subscriber_initalize_time.common().member_flags().IS_OPTIONAL(false);
    mst_subscriber_initalize_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_subscriber_initalize_time.common().member_flags().IS_KEY(false);
    mst_subscriber_initalize_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_subscriber_initalize_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


    MD5 subscriber_initalize_time_hash("subscriber_initalize_time");
    for(int i = 0; i < 4; ++i)
    {
        mst_subscriber_initalize_time.detail().name_hash()[i] = subscriber_initalize_time_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_subscriber_initalize_time);

    MinimalStructMember mst_publisher_send_time;
    mst_publisher_send_time.common().member_id(memberId++);
    mst_publisher_send_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_publisher_send_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_publisher_send_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_publisher_send_time.common().member_flags().IS_OPTIONAL(false);
    mst_publisher_send_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_publisher_send_time.common().member_flags().IS_KEY(false);
    mst_publisher_send_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_publisher_send_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


    MD5 publisher_send_time_hash("publisher_send_time");
    for(int i = 0; i < 4; ++i)
    {
        mst_publisher_send_time.detail().name_hash()[i] = publisher_send_time_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_publisher_send_time);

    MinimalStructMember mst_subscriber_recieve_time;
    mst_subscriber_recieve_time.common().member_id(memberId++);
    mst_subscriber_recieve_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_subscriber_recieve_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_subscriber_recieve_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_subscriber_recieve_time.common().member_flags().IS_OPTIONAL(false);
    mst_subscriber_recieve_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_subscriber_recieve_time.common().member_flags().IS_KEY(false);
    mst_subscriber_recieve_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_subscriber_recieve_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


    MD5 subscriber_recieve_time_hash("subscriber_recieve_time");
    for(int i = 0; i < 4; ++i)
    {
        mst_subscriber_recieve_time.detail().name_hash()[i] = subscriber_recieve_time_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_subscriber_recieve_time);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
    size_t current_alignment {0};
    SerializedPayload_t payload(static_cast<uint32_t>(
        calculator.calculate_serialized_size(type_object->minimal().struct_type(), current_alignment) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
    payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    ser << *type_object;
#if FASTCDR_VERSION_MAJOR == 1
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
#else
    payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
#endif // FASTCDR_VERSION_MAJOR == 1
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("UpdateCam", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("UpdateCam", false);
}

const TypeObject* GetCompleteUpdateCamObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("UpdateCam", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_rtspUrl;
    cst_rtspUrl.common().member_id(memberId++);
    cst_rtspUrl.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_rtspUrl.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_rtspUrl.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_rtspUrl.common().member_flags().IS_OPTIONAL(false);
    cst_rtspUrl.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_rtspUrl.common().member_flags().IS_KEY(false);
    cst_rtspUrl.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_rtspUrl.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

    cst_rtspUrl.detail().name("rtspUrl");

    type_object->complete().struct_type().member_seq().emplace_back(cst_rtspUrl);

    CompleteStructMember cst_valid;
    cst_valid.common().member_id(memberId++);
    cst_valid.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_valid.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_valid.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_valid.common().member_flags().IS_OPTIONAL(false);
    cst_valid.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_valid.common().member_flags().IS_KEY(false);
    cst_valid.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_valid.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_valid.detail().name("valid");

    type_object->complete().struct_type().member_seq().emplace_back(cst_valid);

    CompleteStructMember cst_imgW;
    cst_imgW.common().member_id(memberId++);
    cst_imgW.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_imgW.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_imgW.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_imgW.common().member_flags().IS_OPTIONAL(false);
    cst_imgW.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_imgW.common().member_flags().IS_KEY(false);
    cst_imgW.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_imgW.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_imgW.detail().name("imgW");

    type_object->complete().struct_type().member_seq().emplace_back(cst_imgW);

    CompleteStructMember cst_imgH;
    cst_imgH.common().member_id(memberId++);
    cst_imgH.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_imgH.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_imgH.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_imgH.common().member_flags().IS_OPTIONAL(false);
    cst_imgH.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_imgH.common().member_flags().IS_KEY(false);
    cst_imgH.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_imgH.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_imgH.detail().name("imgH");

    type_object->complete().struct_type().member_seq().emplace_back(cst_imgH);

    CompleteStructMember cst_fpsNum;
    cst_fpsNum.common().member_id(memberId++);
    cst_fpsNum.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_fpsNum.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_fpsNum.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_fpsNum.common().member_flags().IS_OPTIONAL(false);
    cst_fpsNum.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_fpsNum.common().member_flags().IS_KEY(false);
    cst_fpsNum.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_fpsNum.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_fpsNum.detail().name("fpsNum");

    type_object->complete().struct_type().member_seq().emplace_back(cst_fpsNum);

    CompleteStructMember cst_fpsDen;
    cst_fpsDen.common().member_id(memberId++);
    cst_fpsDen.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_fpsDen.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_fpsDen.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_fpsDen.common().member_flags().IS_OPTIONAL(false);
    cst_fpsDen.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_fpsDen.common().member_flags().IS_KEY(false);
    cst_fpsDen.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_fpsDen.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_fpsDen.detail().name("fpsDen");

    type_object->complete().struct_type().member_seq().emplace_back(cst_fpsDen);

    CompleteStructMember cst_frmQueSz;
    cst_frmQueSz.common().member_id(memberId++);
    cst_frmQueSz.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_frmQueSz.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_frmQueSz.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_frmQueSz.common().member_flags().IS_OPTIONAL(false);
    cst_frmQueSz.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_frmQueSz.common().member_flags().IS_KEY(false);
    cst_frmQueSz.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_frmQueSz.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_frmQueSz.detail().name("frmQueSz");

    type_object->complete().struct_type().member_seq().emplace_back(cst_frmQueSz);

    CompleteStructMember cst_detPyrLev;
    cst_detPyrLev.common().member_id(memberId++);
    cst_detPyrLev.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_detPyrLev.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_detPyrLev.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_detPyrLev.common().member_flags().IS_OPTIONAL(false);
    cst_detPyrLev.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_detPyrLev.common().member_flags().IS_KEY(false);
    cst_detPyrLev.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_detPyrLev.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_detPyrLev.detail().name("detPyrLev");

    type_object->complete().struct_type().member_seq().emplace_back(cst_detPyrLev);

    CompleteStructMember cst_detMethodId;
    cst_detMethodId.common().member_id(memberId++);
    cst_detMethodId.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_detMethodId.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_detMethodId.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_detMethodId.common().member_flags().IS_OPTIONAL(false);
    cst_detMethodId.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_detMethodId.common().member_flags().IS_KEY(false);
    cst_detMethodId.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_detMethodId.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_detMethodId.detail().name("detMethodId");

    type_object->complete().struct_type().member_seq().emplace_back(cst_detMethodId);

    CompleteStructMember cst_detNetworkId;
    cst_detNetworkId.common().member_id(memberId++);
    cst_detNetworkId.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_detNetworkId.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_detNetworkId.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_detNetworkId.common().member_flags().IS_OPTIONAL(false);
    cst_detNetworkId.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_detNetworkId.common().member_flags().IS_KEY(false);
    cst_detNetworkId.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_detNetworkId.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_detNetworkId.detail().name("detNetworkId");

    type_object->complete().struct_type().member_seq().emplace_back(cst_detNetworkId);

    CompleteStructMember cst_detFrmsToSkip;
    cst_detFrmsToSkip.common().member_id(memberId++);
    cst_detFrmsToSkip.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_detFrmsToSkip.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_detFrmsToSkip.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_detFrmsToSkip.common().member_flags().IS_OPTIONAL(false);
    cst_detFrmsToSkip.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_detFrmsToSkip.common().member_flags().IS_KEY(false);
    cst_detFrmsToSkip.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_detFrmsToSkip.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false));


    cst_detFrmsToSkip.detail().name("detFrmsToSkip");

    type_object->complete().struct_type().member_seq().emplace_back(cst_detFrmsToSkip);

    CompleteStructMember cst_mp4LocationAndPrefix;
    cst_mp4LocationAndPrefix.common().member_id(memberId++);
    cst_mp4LocationAndPrefix.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_mp4LocationAndPrefix.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_mp4LocationAndPrefix.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_mp4LocationAndPrefix.common().member_flags().IS_OPTIONAL(false);
    cst_mp4LocationAndPrefix.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_mp4LocationAndPrefix.common().member_flags().IS_KEY(false);
    cst_mp4LocationAndPrefix.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_mp4LocationAndPrefix.common().member_type_id(*TypeObjectFactory::get_instance()->get_string_identifier(255, false));

    cst_mp4LocationAndPrefix.detail().name("mp4LocationAndPrefix");

    type_object->complete().struct_type().member_seq().emplace_back(cst_mp4LocationAndPrefix);

    CompleteStructMember cst_subscriber_initalize_time;
    cst_subscriber_initalize_time.common().member_id(memberId++);
    cst_subscriber_initalize_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_subscriber_initalize_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_subscriber_initalize_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_subscriber_initalize_time.common().member_flags().IS_OPTIONAL(false);
    cst_subscriber_initalize_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_subscriber_initalize_time.common().member_flags().IS_KEY(false);
    cst_subscriber_initalize_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_subscriber_initalize_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


    cst_subscriber_initalize_time.detail().name("subscriber_initalize_time");

    type_object->complete().struct_type().member_seq().emplace_back(cst_subscriber_initalize_time);

    CompleteStructMember cst_publisher_send_time;
    cst_publisher_send_time.common().member_id(memberId++);
    cst_publisher_send_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_publisher_send_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_publisher_send_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_publisher_send_time.common().member_flags().IS_OPTIONAL(false);
    cst_publisher_send_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_publisher_send_time.common().member_flags().IS_KEY(false);
    cst_publisher_send_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_publisher_send_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


    cst_publisher_send_time.detail().name("publisher_send_time");

    type_object->complete().struct_type().member_seq().emplace_back(cst_publisher_send_time);

    CompleteStructMember cst_subscriber_recieve_time;
    cst_subscriber_recieve_time.common().member_id(memberId++);
    cst_subscriber_recieve_time.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_subscriber_recieve_time.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_subscriber_recieve_time.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_subscriber_recieve_time.common().member_flags().IS_OPTIONAL(false);
    cst_subscriber_recieve_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_subscriber_recieve_time.common().member_flags().IS_KEY(false);
    cst_subscriber_recieve_time.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_subscriber_recieve_time.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));


    cst_subscriber_recieve_time.detail().name("subscriber_recieve_time");

    type_object->complete().struct_type().member_seq().emplace_back(cst_subscriber_recieve_time);


    // Header
    type_object->complete().struct_type().header().detail().type_name("UpdateCam");
    // TODO inheritance
    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    eprosima::fastcdr::CdrSizeCalculator calculator(eprosima::fastcdr::CdrVersion::XCDRv1);
    size_t current_alignment {0};
    SerializedPayload_t payload(static_cast<uint32_t>(
        calculator.calculate_serialized_size(type_object->complete().struct_type(), current_alignment) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::CdrVersion::XCDRv1); // Object that serializes the data.
    payload.encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

    ser << *type_object;
#if FASTCDR_VERSION_MAJOR == 1
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
#else
    payload.length = (uint32_t)ser.get_serialized_data_length(); //Get the serialized length
#endif // FASTCDR_VERSION_MAJOR == 1
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("UpdateCam", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("UpdateCam", true);
}
