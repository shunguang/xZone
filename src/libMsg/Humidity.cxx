// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Humidity.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Humidity.h"

#include "HumidityTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




Humidity::Humidity()
{
    // Just to register all known types
    registerHumidityTypes();
}

Humidity::~Humidity()
{
}

Humidity::Humidity(
        const Humidity& x)
{
    m_index = x.m_index;
    m_humidity = x.m_humidity;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
}

Humidity::Humidity(
        Humidity&& x) noexcept
{
    m_index = x.m_index;
    m_humidity = x.m_humidity;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
}

Humidity& Humidity::operator =(
        const Humidity& x)
{

    m_index = x.m_index;
    m_humidity = x.m_humidity;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    return *this;
}

Humidity& Humidity::operator =(
        Humidity&& x) noexcept
{

    m_index = x.m_index;
    m_humidity = x.m_humidity;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    return *this;
}

bool Humidity::operator ==(
        const Humidity& x) const
{
    return (m_index == x.m_index &&
           m_humidity == x.m_humidity &&
           m_subscriber_initalize_time == x.m_subscriber_initalize_time &&
           m_publisher_send_time == x.m_publisher_send_time &&
           m_subscriber_recieve_time == x.m_subscriber_recieve_time);
}

bool Humidity::operator !=(
        const Humidity& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void Humidity::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t Humidity::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& Humidity::index()
{
    return m_index;
}


/*!
 * @brief This function sets a value in member humidity
 * @param _humidity New value for member humidity
 */
void Humidity::humidity(
        uint32_t _humidity)
{
    m_humidity = _humidity;
}

/*!
 * @brief This function returns the value of member humidity
 * @return Value of member humidity
 */
uint32_t Humidity::humidity() const
{
    return m_humidity;
}

/*!
 * @brief This function returns a reference to member humidity
 * @return Reference to member humidity
 */
uint32_t& Humidity::humidity()
{
    return m_humidity;
}


/*!
 * @brief This function sets a value in member subscriber_initalize_time
 * @param _subscriber_initalize_time New value for member subscriber_initalize_time
 */
void Humidity::subscriber_initalize_time(
        uint64_t _subscriber_initalize_time)
{
    m_subscriber_initalize_time = _subscriber_initalize_time;
}

/*!
 * @brief This function returns the value of member subscriber_initalize_time
 * @return Value of member subscriber_initalize_time
 */
uint64_t Humidity::subscriber_initalize_time() const
{
    return m_subscriber_initalize_time;
}

/*!
 * @brief This function returns a reference to member subscriber_initalize_time
 * @return Reference to member subscriber_initalize_time
 */
uint64_t& Humidity::subscriber_initalize_time()
{
    return m_subscriber_initalize_time;
}


/*!
 * @brief This function sets a value in member publisher_send_time
 * @param _publisher_send_time New value for member publisher_send_time
 */
void Humidity::publisher_send_time(
        uint64_t _publisher_send_time)
{
    m_publisher_send_time = _publisher_send_time;
}

/*!
 * @brief This function returns the value of member publisher_send_time
 * @return Value of member publisher_send_time
 */
uint64_t Humidity::publisher_send_time() const
{
    return m_publisher_send_time;
}

/*!
 * @brief This function returns a reference to member publisher_send_time
 * @return Reference to member publisher_send_time
 */
uint64_t& Humidity::publisher_send_time()
{
    return m_publisher_send_time;
}


/*!
 * @brief This function sets a value in member subscriber_recieve_time
 * @param _subscriber_recieve_time New value for member subscriber_recieve_time
 */
void Humidity::subscriber_recieve_time(
        uint64_t _subscriber_recieve_time)
{
    m_subscriber_recieve_time = _subscriber_recieve_time;
}

/*!
 * @brief This function returns the value of member subscriber_recieve_time
 * @return Value of member subscriber_recieve_time
 */
uint64_t Humidity::subscriber_recieve_time() const
{
    return m_subscriber_recieve_time;
}

/*!
 * @brief This function returns a reference to member subscriber_recieve_time
 * @return Reference to member subscriber_recieve_time
 */
uint64_t& Humidity::subscriber_recieve_time()
{
    return m_subscriber_recieve_time;
}


// Include auxiliary functions like for serializing/deserializing.
#include "HumidityCdrAux.ipp"

