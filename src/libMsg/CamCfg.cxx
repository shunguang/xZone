// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CamCfg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CamCfg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define CamCfg_max_cdr_typesize 560ULL;
#define CamCfg_max_key_cdr_typesize 0ULL;

CamCfg::CamCfg()
{
    // string m_rtspUrl
    m_rtspUrl ="";
    // long m_valid
    m_valid = 0;
    // long m_imgW
    m_imgW = 0;
    // long m_imageH
    m_imageH = 0;
    // long m_fpsNum
    m_fpsNum = 0;
    // long m_fpsDen
    m_fpsDen = 0;
    // long m_frmQueSz
    m_frmQueSz = 0;
    // long m_detPyrLev
    m_detPyrLev = 0;
    // long m_detMethodId
    m_detMethodId = 0;
    // long m_detNetworkId
    m_detNetworkId = 0;
    // long m_detFrmsToSkip
    m_detFrmsToSkip = 0;
    // string m_mp4LocationAndPrefix
    m_mp4LocationAndPrefix ="";

}

CamCfg::~CamCfg()
{












}

CamCfg::CamCfg(
        const CamCfg& x)
{
    m_rtspUrl = x.m_rtspUrl;
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imageH = x.m_imageH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = x.m_mp4LocationAndPrefix;
}

CamCfg::CamCfg(
        CamCfg&& x) noexcept 
{
    m_rtspUrl = std::move(x.m_rtspUrl);
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imageH = x.m_imageH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = std::move(x.m_mp4LocationAndPrefix);
}

CamCfg& CamCfg::operator =(
        const CamCfg& x)
{

    m_rtspUrl = x.m_rtspUrl;
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imageH = x.m_imageH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = x.m_mp4LocationAndPrefix;

    return *this;
}

CamCfg& CamCfg::operator =(
        CamCfg&& x) noexcept
{

    m_rtspUrl = std::move(x.m_rtspUrl);
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imageH = x.m_imageH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = std::move(x.m_mp4LocationAndPrefix);

    return *this;
}

bool CamCfg::operator ==(
        const CamCfg& x) const
{

    return (m_rtspUrl == x.m_rtspUrl && m_valid == x.m_valid && m_imgW == x.m_imgW && m_imageH == x.m_imageH && m_fpsNum == x.m_fpsNum && m_fpsDen == x.m_fpsDen && m_frmQueSz == x.m_frmQueSz && m_detPyrLev == x.m_detPyrLev && m_detMethodId == x.m_detMethodId && m_detNetworkId == x.m_detNetworkId && m_detFrmsToSkip == x.m_detFrmsToSkip && m_mp4LocationAndPrefix == x.m_mp4LocationAndPrefix);
}

bool CamCfg::operator !=(
        const CamCfg& x) const
{
    return !(*this == x);
}

size_t CamCfg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CamCfg_max_cdr_typesize;
}

size_t CamCfg::getCdrSerializedSize(
        const CamCfg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.rtspUrl().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.mp4LocationAndPrefix().size() + 1;


    return current_alignment - initial_alignment;
}

void CamCfg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_rtspUrl.c_str();
    scdr << m_valid;
    scdr << m_imgW;
    scdr << m_imageH;
    scdr << m_fpsNum;
    scdr << m_fpsDen;
    scdr << m_frmQueSz;
    scdr << m_detPyrLev;
    scdr << m_detMethodId;
    scdr << m_detNetworkId;
    scdr << m_detFrmsToSkip;
    scdr << m_mp4LocationAndPrefix.c_str();

}

void CamCfg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_rtspUrl;
    dcdr >> m_valid;
    dcdr >> m_imgW;
    dcdr >> m_imageH;
    dcdr >> m_fpsNum;
    dcdr >> m_fpsDen;
    dcdr >> m_frmQueSz;
    dcdr >> m_detPyrLev;
    dcdr >> m_detMethodId;
    dcdr >> m_detNetworkId;
    dcdr >> m_detFrmsToSkip;
    dcdr >> m_mp4LocationAndPrefix;
}

/*!
 * @brief This function copies the value in member rtspUrl
 * @param _rtspUrl New value to be copied in member rtspUrl
 */
void CamCfg::rtspUrl(
        const std::string& _rtspUrl)
{
    m_rtspUrl = _rtspUrl;
}

/*!
 * @brief This function moves the value in member rtspUrl
 * @param _rtspUrl New value to be moved in member rtspUrl
 */
void CamCfg::rtspUrl(
        std::string&& _rtspUrl)
{
    m_rtspUrl = std::move(_rtspUrl);
}

/*!
 * @brief This function returns a constant reference to member rtspUrl
 * @return Constant reference to member rtspUrl
 */
const std::string& CamCfg::rtspUrl() const
{
    return m_rtspUrl;
}

/*!
 * @brief This function returns a reference to member rtspUrl
 * @return Reference to member rtspUrl
 */
std::string& CamCfg::rtspUrl()
{
    return m_rtspUrl;
}
/*!
 * @brief This function sets a value in member valid
 * @param _valid New value for member valid
 */
void CamCfg::valid(
        int32_t _valid)
{
    m_valid = _valid;
}

/*!
 * @brief This function returns the value of member valid
 * @return Value of member valid
 */
int32_t CamCfg::valid() const
{
    return m_valid;
}

/*!
 * @brief This function returns a reference to member valid
 * @return Reference to member valid
 */
int32_t& CamCfg::valid()
{
    return m_valid;
}

/*!
 * @brief This function sets a value in member imgW
 * @param _imgW New value for member imgW
 */
void CamCfg::imgW(
        int32_t _imgW)
{
    m_imgW = _imgW;
}

/*!
 * @brief This function returns the value of member imgW
 * @return Value of member imgW
 */
int32_t CamCfg::imgW() const
{
    return m_imgW;
}

/*!
 * @brief This function returns a reference to member imgW
 * @return Reference to member imgW
 */
int32_t& CamCfg::imgW()
{
    return m_imgW;
}

/*!
 * @brief This function sets a value in member imageH
 * @param _imageH New value for member imageH
 */
void CamCfg::imageH(
        int32_t _imageH)
{
    m_imageH = _imageH;
}

/*!
 * @brief This function returns the value of member imageH
 * @return Value of member imageH
 */
int32_t CamCfg::imageH() const
{
    return m_imageH;
}

/*!
 * @brief This function returns a reference to member imageH
 * @return Reference to member imageH
 */
int32_t& CamCfg::imageH()
{
    return m_imageH;
}

/*!
 * @brief This function sets a value in member fpsNum
 * @param _fpsNum New value for member fpsNum
 */
void CamCfg::fpsNum(
        int32_t _fpsNum)
{
    m_fpsNum = _fpsNum;
}

/*!
 * @brief This function returns the value of member fpsNum
 * @return Value of member fpsNum
 */
int32_t CamCfg::fpsNum() const
{
    return m_fpsNum;
}

/*!
 * @brief This function returns a reference to member fpsNum
 * @return Reference to member fpsNum
 */
int32_t& CamCfg::fpsNum()
{
    return m_fpsNum;
}

/*!
 * @brief This function sets a value in member fpsDen
 * @param _fpsDen New value for member fpsDen
 */
void CamCfg::fpsDen(
        int32_t _fpsDen)
{
    m_fpsDen = _fpsDen;
}

/*!
 * @brief This function returns the value of member fpsDen
 * @return Value of member fpsDen
 */
int32_t CamCfg::fpsDen() const
{
    return m_fpsDen;
}

/*!
 * @brief This function returns a reference to member fpsDen
 * @return Reference to member fpsDen
 */
int32_t& CamCfg::fpsDen()
{
    return m_fpsDen;
}

/*!
 * @brief This function sets a value in member frmQueSz
 * @param _frmQueSz New value for member frmQueSz
 */
void CamCfg::frmQueSz(
        int32_t _frmQueSz)
{
    m_frmQueSz = _frmQueSz;
}

/*!
 * @brief This function returns the value of member frmQueSz
 * @return Value of member frmQueSz
 */
int32_t CamCfg::frmQueSz() const
{
    return m_frmQueSz;
}

/*!
 * @brief This function returns a reference to member frmQueSz
 * @return Reference to member frmQueSz
 */
int32_t& CamCfg::frmQueSz()
{
    return m_frmQueSz;
}

/*!
 * @brief This function sets a value in member detPyrLev
 * @param _detPyrLev New value for member detPyrLev
 */
void CamCfg::detPyrLev(
        int32_t _detPyrLev)
{
    m_detPyrLev = _detPyrLev;
}

/*!
 * @brief This function returns the value of member detPyrLev
 * @return Value of member detPyrLev
 */
int32_t CamCfg::detPyrLev() const
{
    return m_detPyrLev;
}

/*!
 * @brief This function returns a reference to member detPyrLev
 * @return Reference to member detPyrLev
 */
int32_t& CamCfg::detPyrLev()
{
    return m_detPyrLev;
}

/*!
 * @brief This function sets a value in member detMethodId
 * @param _detMethodId New value for member detMethodId
 */
void CamCfg::detMethodId(
        int32_t _detMethodId)
{
    m_detMethodId = _detMethodId;
}

/*!
 * @brief This function returns the value of member detMethodId
 * @return Value of member detMethodId
 */
int32_t CamCfg::detMethodId() const
{
    return m_detMethodId;
}

/*!
 * @brief This function returns a reference to member detMethodId
 * @return Reference to member detMethodId
 */
int32_t& CamCfg::detMethodId()
{
    return m_detMethodId;
}

/*!
 * @brief This function sets a value in member detNetworkId
 * @param _detNetworkId New value for member detNetworkId
 */
void CamCfg::detNetworkId(
        int32_t _detNetworkId)
{
    m_detNetworkId = _detNetworkId;
}

/*!
 * @brief This function returns the value of member detNetworkId
 * @return Value of member detNetworkId
 */
int32_t CamCfg::detNetworkId() const
{
    return m_detNetworkId;
}

/*!
 * @brief This function returns a reference to member detNetworkId
 * @return Reference to member detNetworkId
 */
int32_t& CamCfg::detNetworkId()
{
    return m_detNetworkId;
}

/*!
 * @brief This function sets a value in member detFrmsToSkip
 * @param _detFrmsToSkip New value for member detFrmsToSkip
 */
void CamCfg::detFrmsToSkip(
        int32_t _detFrmsToSkip)
{
    m_detFrmsToSkip = _detFrmsToSkip;
}

/*!
 * @brief This function returns the value of member detFrmsToSkip
 * @return Value of member detFrmsToSkip
 */
int32_t CamCfg::detFrmsToSkip() const
{
    return m_detFrmsToSkip;
}

/*!
 * @brief This function returns a reference to member detFrmsToSkip
 * @return Reference to member detFrmsToSkip
 */
int32_t& CamCfg::detFrmsToSkip()
{
    return m_detFrmsToSkip;
}

/*!
 * @brief This function copies the value in member mp4LocationAndPrefix
 * @param _mp4LocationAndPrefix New value to be copied in member mp4LocationAndPrefix
 */
void CamCfg::mp4LocationAndPrefix(
        const std::string& _mp4LocationAndPrefix)
{
    m_mp4LocationAndPrefix = _mp4LocationAndPrefix;
}

/*!
 * @brief This function moves the value in member mp4LocationAndPrefix
 * @param _mp4LocationAndPrefix New value to be moved in member mp4LocationAndPrefix
 */
void CamCfg::mp4LocationAndPrefix(
        std::string&& _mp4LocationAndPrefix)
{
    m_mp4LocationAndPrefix = std::move(_mp4LocationAndPrefix);
}

/*!
 * @brief This function returns a constant reference to member mp4LocationAndPrefix
 * @return Constant reference to member mp4LocationAndPrefix
 */
const std::string& CamCfg::mp4LocationAndPrefix() const
{
    return m_mp4LocationAndPrefix;
}

/*!
 * @brief This function returns a reference to member mp4LocationAndPrefix
 * @return Reference to member mp4LocationAndPrefix
 */
std::string& CamCfg::mp4LocationAndPrefix()
{
    return m_mp4LocationAndPrefix;
}


size_t CamCfg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return CamCfg_max_key_cdr_typesize;
}

bool CamCfg::isKeyDefined()
{
    return false;
}

void CamCfg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

