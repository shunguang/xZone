// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UpdateCam.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UpdateCam.h"

#include "UpdateCamTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




UpdateCam::UpdateCam()
{
    // Just to register all known types
    registerUpdateCamTypes();
}

UpdateCam::~UpdateCam()
{
}

UpdateCam::UpdateCam(
        const UpdateCam& x)
{
    m_rtspUrl = x.m_rtspUrl;
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imgH = x.m_imgH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = x.m_mp4LocationAndPrefix;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
}

UpdateCam::UpdateCam(
        UpdateCam&& x) noexcept
{
    m_rtspUrl = std::move(x.m_rtspUrl);
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imgH = x.m_imgH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = std::move(x.m_mp4LocationAndPrefix);
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
}

UpdateCam& UpdateCam::operator =(
        const UpdateCam& x)
{

    m_rtspUrl = x.m_rtspUrl;
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imgH = x.m_imgH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = x.m_mp4LocationAndPrefix;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    return *this;
}

UpdateCam& UpdateCam::operator =(
        UpdateCam&& x) noexcept
{

    m_rtspUrl = std::move(x.m_rtspUrl);
    m_valid = x.m_valid;
    m_imgW = x.m_imgW;
    m_imgH = x.m_imgH;
    m_fpsNum = x.m_fpsNum;
    m_fpsDen = x.m_fpsDen;
    m_frmQueSz = x.m_frmQueSz;
    m_detPyrLev = x.m_detPyrLev;
    m_detMethodId = x.m_detMethodId;
    m_detNetworkId = x.m_detNetworkId;
    m_detFrmsToSkip = x.m_detFrmsToSkip;
    m_mp4LocationAndPrefix = std::move(x.m_mp4LocationAndPrefix);
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    return *this;
}

bool UpdateCam::operator ==(
        const UpdateCam& x) const
{
    return (m_rtspUrl == x.m_rtspUrl &&
           m_valid == x.m_valid &&
           m_imgW == x.m_imgW &&
           m_imgH == x.m_imgH &&
           m_fpsNum == x.m_fpsNum &&
           m_fpsDen == x.m_fpsDen &&
           m_frmQueSz == x.m_frmQueSz &&
           m_detPyrLev == x.m_detPyrLev &&
           m_detMethodId == x.m_detMethodId &&
           m_detNetworkId == x.m_detNetworkId &&
           m_detFrmsToSkip == x.m_detFrmsToSkip &&
           m_mp4LocationAndPrefix == x.m_mp4LocationAndPrefix &&
           m_subscriber_initalize_time == x.m_subscriber_initalize_time &&
           m_publisher_send_time == x.m_publisher_send_time &&
           m_subscriber_recieve_time == x.m_subscriber_recieve_time);
}

bool UpdateCam::operator !=(
        const UpdateCam& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member rtspUrl
 * @param _rtspUrl New value to be copied in member rtspUrl
 */
void UpdateCam::rtspUrl(
        const std::string& _rtspUrl)
{
    m_rtspUrl = _rtspUrl;
}

/*!
 * @brief This function moves the value in member rtspUrl
 * @param _rtspUrl New value to be moved in member rtspUrl
 */
void UpdateCam::rtspUrl(
        std::string&& _rtspUrl)
{
    m_rtspUrl = std::move(_rtspUrl);
}

/*!
 * @brief This function returns a constant reference to member rtspUrl
 * @return Constant reference to member rtspUrl
 */
const std::string& UpdateCam::rtspUrl() const
{
    return m_rtspUrl;
}

/*!
 * @brief This function returns a reference to member rtspUrl
 * @return Reference to member rtspUrl
 */
std::string& UpdateCam::rtspUrl()
{
    return m_rtspUrl;
}


/*!
 * @brief This function sets a value in member valid
 * @param _valid New value for member valid
 */
void UpdateCam::valid(
        int32_t _valid)
{
    m_valid = _valid;
}

/*!
 * @brief This function returns the value of member valid
 * @return Value of member valid
 */
int32_t UpdateCam::valid() const
{
    return m_valid;
}

/*!
 * @brief This function returns a reference to member valid
 * @return Reference to member valid
 */
int32_t& UpdateCam::valid()
{
    return m_valid;
}


/*!
 * @brief This function sets a value in member imgW
 * @param _imgW New value for member imgW
 */
void UpdateCam::imgW(
        int32_t _imgW)
{
    m_imgW = _imgW;
}

/*!
 * @brief This function returns the value of member imgW
 * @return Value of member imgW
 */
int32_t UpdateCam::imgW() const
{
    return m_imgW;
}

/*!
 * @brief This function returns a reference to member imgW
 * @return Reference to member imgW
 */
int32_t& UpdateCam::imgW()
{
    return m_imgW;
}


/*!
 * @brief This function sets a value in member imgH
 * @param _imgH New value for member imgH
 */
void UpdateCam::imgH(
        int32_t _imgH)
{
    m_imgH = _imgH;
}

/*!
 * @brief This function returns the value of member imgH
 * @return Value of member imgH
 */
int32_t UpdateCam::imgH() const
{
    return m_imgH;
}

/*!
 * @brief This function returns a reference to member imgH
 * @return Reference to member imgH
 */
int32_t& UpdateCam::imgH()
{
    return m_imgH;
}


/*!
 * @brief This function sets a value in member fpsNum
 * @param _fpsNum New value for member fpsNum
 */
void UpdateCam::fpsNum(
        int32_t _fpsNum)
{
    m_fpsNum = _fpsNum;
}

/*!
 * @brief This function returns the value of member fpsNum
 * @return Value of member fpsNum
 */
int32_t UpdateCam::fpsNum() const
{
    return m_fpsNum;
}

/*!
 * @brief This function returns a reference to member fpsNum
 * @return Reference to member fpsNum
 */
int32_t& UpdateCam::fpsNum()
{
    return m_fpsNum;
}


/*!
 * @brief This function sets a value in member fpsDen
 * @param _fpsDen New value for member fpsDen
 */
void UpdateCam::fpsDen(
        int32_t _fpsDen)
{
    m_fpsDen = _fpsDen;
}

/*!
 * @brief This function returns the value of member fpsDen
 * @return Value of member fpsDen
 */
int32_t UpdateCam::fpsDen() const
{
    return m_fpsDen;
}

/*!
 * @brief This function returns a reference to member fpsDen
 * @return Reference to member fpsDen
 */
int32_t& UpdateCam::fpsDen()
{
    return m_fpsDen;
}


/*!
 * @brief This function sets a value in member frmQueSz
 * @param _frmQueSz New value for member frmQueSz
 */
void UpdateCam::frmQueSz(
        int32_t _frmQueSz)
{
    m_frmQueSz = _frmQueSz;
}

/*!
 * @brief This function returns the value of member frmQueSz
 * @return Value of member frmQueSz
 */
int32_t UpdateCam::frmQueSz() const
{
    return m_frmQueSz;
}

/*!
 * @brief This function returns a reference to member frmQueSz
 * @return Reference to member frmQueSz
 */
int32_t& UpdateCam::frmQueSz()
{
    return m_frmQueSz;
}


/*!
 * @brief This function sets a value in member detPyrLev
 * @param _detPyrLev New value for member detPyrLev
 */
void UpdateCam::detPyrLev(
        int32_t _detPyrLev)
{
    m_detPyrLev = _detPyrLev;
}

/*!
 * @brief This function returns the value of member detPyrLev
 * @return Value of member detPyrLev
 */
int32_t UpdateCam::detPyrLev() const
{
    return m_detPyrLev;
}

/*!
 * @brief This function returns a reference to member detPyrLev
 * @return Reference to member detPyrLev
 */
int32_t& UpdateCam::detPyrLev()
{
    return m_detPyrLev;
}


/*!
 * @brief This function sets a value in member detMethodId
 * @param _detMethodId New value for member detMethodId
 */
void UpdateCam::detMethodId(
        int32_t _detMethodId)
{
    m_detMethodId = _detMethodId;
}

/*!
 * @brief This function returns the value of member detMethodId
 * @return Value of member detMethodId
 */
int32_t UpdateCam::detMethodId() const
{
    return m_detMethodId;
}

/*!
 * @brief This function returns a reference to member detMethodId
 * @return Reference to member detMethodId
 */
int32_t& UpdateCam::detMethodId()
{
    return m_detMethodId;
}


/*!
 * @brief This function sets a value in member detNetworkId
 * @param _detNetworkId New value for member detNetworkId
 */
void UpdateCam::detNetworkId(
        int32_t _detNetworkId)
{
    m_detNetworkId = _detNetworkId;
}

/*!
 * @brief This function returns the value of member detNetworkId
 * @return Value of member detNetworkId
 */
int32_t UpdateCam::detNetworkId() const
{
    return m_detNetworkId;
}

/*!
 * @brief This function returns a reference to member detNetworkId
 * @return Reference to member detNetworkId
 */
int32_t& UpdateCam::detNetworkId()
{
    return m_detNetworkId;
}


/*!
 * @brief This function sets a value in member detFrmsToSkip
 * @param _detFrmsToSkip New value for member detFrmsToSkip
 */
void UpdateCam::detFrmsToSkip(
        int32_t _detFrmsToSkip)
{
    m_detFrmsToSkip = _detFrmsToSkip;
}

/*!
 * @brief This function returns the value of member detFrmsToSkip
 * @return Value of member detFrmsToSkip
 */
int32_t UpdateCam::detFrmsToSkip() const
{
    return m_detFrmsToSkip;
}

/*!
 * @brief This function returns a reference to member detFrmsToSkip
 * @return Reference to member detFrmsToSkip
 */
int32_t& UpdateCam::detFrmsToSkip()
{
    return m_detFrmsToSkip;
}


/*!
 * @brief This function copies the value in member mp4LocationAndPrefix
 * @param _mp4LocationAndPrefix New value to be copied in member mp4LocationAndPrefix
 */
void UpdateCam::mp4LocationAndPrefix(
        const std::string& _mp4LocationAndPrefix)
{
    m_mp4LocationAndPrefix = _mp4LocationAndPrefix;
}

/*!
 * @brief This function moves the value in member mp4LocationAndPrefix
 * @param _mp4LocationAndPrefix New value to be moved in member mp4LocationAndPrefix
 */
void UpdateCam::mp4LocationAndPrefix(
        std::string&& _mp4LocationAndPrefix)
{
    m_mp4LocationAndPrefix = std::move(_mp4LocationAndPrefix);
}

/*!
 * @brief This function returns a constant reference to member mp4LocationAndPrefix
 * @return Constant reference to member mp4LocationAndPrefix
 */
const std::string& UpdateCam::mp4LocationAndPrefix() const
{
    return m_mp4LocationAndPrefix;
}

/*!
 * @brief This function returns a reference to member mp4LocationAndPrefix
 * @return Reference to member mp4LocationAndPrefix
 */
std::string& UpdateCam::mp4LocationAndPrefix()
{
    return m_mp4LocationAndPrefix;
}


/*!
 * @brief This function sets a value in member subscriber_initalize_time
 * @param _subscriber_initalize_time New value for member subscriber_initalize_time
 */
void UpdateCam::subscriber_initalize_time(
        uint64_t _subscriber_initalize_time)
{
    m_subscriber_initalize_time = _subscriber_initalize_time;
}

/*!
 * @brief This function returns the value of member subscriber_initalize_time
 * @return Value of member subscriber_initalize_time
 */
uint64_t UpdateCam::subscriber_initalize_time() const
{
    return m_subscriber_initalize_time;
}

/*!
 * @brief This function returns a reference to member subscriber_initalize_time
 * @return Reference to member subscriber_initalize_time
 */
uint64_t& UpdateCam::subscriber_initalize_time()
{
    return m_subscriber_initalize_time;
}


/*!
 * @brief This function sets a value in member publisher_send_time
 * @param _publisher_send_time New value for member publisher_send_time
 */
void UpdateCam::publisher_send_time(
        uint64_t _publisher_send_time)
{
    m_publisher_send_time = _publisher_send_time;
}

/*!
 * @brief This function returns the value of member publisher_send_time
 * @return Value of member publisher_send_time
 */
uint64_t UpdateCam::publisher_send_time() const
{
    return m_publisher_send_time;
}

/*!
 * @brief This function returns a reference to member publisher_send_time
 * @return Reference to member publisher_send_time
 */
uint64_t& UpdateCam::publisher_send_time()
{
    return m_publisher_send_time;
}


/*!
 * @brief This function sets a value in member subscriber_recieve_time
 * @param _subscriber_recieve_time New value for member subscriber_recieve_time
 */
void UpdateCam::subscriber_recieve_time(
        uint64_t _subscriber_recieve_time)
{
    m_subscriber_recieve_time = _subscriber_recieve_time;
}

/*!
 * @brief This function returns the value of member subscriber_recieve_time
 * @return Value of member subscriber_recieve_time
 */
uint64_t UpdateCam::subscriber_recieve_time() const
{
    return m_subscriber_recieve_time;
}

/*!
 * @brief This function returns a reference to member subscriber_recieve_time
 * @return Reference to member subscriber_recieve_time
 */
uint64_t& UpdateCam::subscriber_recieve_time()
{
    return m_subscriber_recieve_time;
}


// Include auxiliary functions like for serializing/deserializing.
#include "UpdateCamCdrAux.ipp"

