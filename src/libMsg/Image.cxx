// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Image.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Image.h"

#include "ImageTypeObject.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




Image::Image()
{
    // Just to register all known types
    registerImageTypes();
}

Image::~Image()
{
}

Image::Image(
        const Image& x)
{
    m_image = x.m_image;
    m_frame_number = x.m_frame_number;
    m_frequency = x.m_frequency;
    m_height = x.m_height;
    m_width = x.m_width;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    m_transport = x.m_transport;
}

Image::Image(
        Image&& x) noexcept
{
    m_image = std::move(x.m_image);
    m_frame_number = x.m_frame_number;
    m_frequency = x.m_frequency;
    m_height = x.m_height;
    m_width = x.m_width;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    m_transport = x.m_transport;
}

Image& Image::operator =(
        const Image& x)
{

    m_image = x.m_image;
    m_frame_number = x.m_frame_number;
    m_frequency = x.m_frequency;
    m_height = x.m_height;
    m_width = x.m_width;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    m_transport = x.m_transport;
    return *this;
}

Image& Image::operator =(
        Image&& x) noexcept
{

    m_image = std::move(x.m_image);
    m_frame_number = x.m_frame_number;
    m_frequency = x.m_frequency;
    m_height = x.m_height;
    m_width = x.m_width;
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
    m_transport = x.m_transport;
    return *this;
}

bool Image::operator ==(
        const Image& x) const
{
    return (m_image == x.m_image &&
           m_frame_number == x.m_frame_number &&
           m_frequency == x.m_frequency &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_subscriber_initalize_time == x.m_subscriber_initalize_time &&
           m_publisher_send_time == x.m_publisher_send_time &&
           m_subscriber_recieve_time == x.m_subscriber_recieve_time &&
           m_transport == x.m_transport);
}

bool Image::operator !=(
        const Image& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member image
 * @param _image New value to be copied in member image
 */
void Image::image(
        const std::vector<uint8_t>& _image)
{
    m_image = _image;
}

/*!
 * @brief This function moves the value in member image
 * @param _image New value to be moved in member image
 */
void Image::image(
        std::vector<uint8_t>&& _image)
{
    m_image = std::move(_image);
}

/*!
 * @brief This function returns a constant reference to member image
 * @return Constant reference to member image
 */
const std::vector<uint8_t>& Image::image() const
{
    return m_image;
}

/*!
 * @brief This function returns a reference to member image
 * @return Reference to member image
 */
std::vector<uint8_t>& Image::image()
{
    return m_image;
}


/*!
 * @brief This function sets a value in member frame_number
 * @param _frame_number New value for member frame_number
 */
void Image::frame_number(
        uint32_t _frame_number)
{
    m_frame_number = _frame_number;
}

/*!
 * @brief This function returns the value of member frame_number
 * @return Value of member frame_number
 */
uint32_t Image::frame_number() const
{
    return m_frame_number;
}

/*!
 * @brief This function returns a reference to member frame_number
 * @return Reference to member frame_number
 */
uint32_t& Image::frame_number()
{
    return m_frame_number;
}


/*!
 * @brief This function sets a value in member frequency
 * @param _frequency New value for member frequency
 */
void Image::frequency(
        uint32_t _frequency)
{
    m_frequency = _frequency;
}

/*!
 * @brief This function returns the value of member frequency
 * @return Value of member frequency
 */
uint32_t Image::frequency() const
{
    return m_frequency;
}

/*!
 * @brief This function returns a reference to member frequency
 * @return Reference to member frequency
 */
uint32_t& Image::frequency()
{
    return m_frequency;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Image::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Image::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Image::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Image::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Image::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Image::width()
{
    return m_width;
}


/*!
 * @brief This function sets a value in member subscriber_initalize_time
 * @param _subscriber_initalize_time New value for member subscriber_initalize_time
 */
void Image::subscriber_initalize_time(
        uint64_t _subscriber_initalize_time)
{
    m_subscriber_initalize_time = _subscriber_initalize_time;
}

/*!
 * @brief This function returns the value of member subscriber_initalize_time
 * @return Value of member subscriber_initalize_time
 */
uint64_t Image::subscriber_initalize_time() const
{
    return m_subscriber_initalize_time;
}

/*!
 * @brief This function returns a reference to member subscriber_initalize_time
 * @return Reference to member subscriber_initalize_time
 */
uint64_t& Image::subscriber_initalize_time()
{
    return m_subscriber_initalize_time;
}


/*!
 * @brief This function sets a value in member publisher_send_time
 * @param _publisher_send_time New value for member publisher_send_time
 */
void Image::publisher_send_time(
        uint64_t _publisher_send_time)
{
    m_publisher_send_time = _publisher_send_time;
}

/*!
 * @brief This function returns the value of member publisher_send_time
 * @return Value of member publisher_send_time
 */
uint64_t Image::publisher_send_time() const
{
    return m_publisher_send_time;
}

/*!
 * @brief This function returns a reference to member publisher_send_time
 * @return Reference to member publisher_send_time
 */
uint64_t& Image::publisher_send_time()
{
    return m_publisher_send_time;
}


/*!
 * @brief This function sets a value in member subscriber_recieve_time
 * @param _subscriber_recieve_time New value for member subscriber_recieve_time
 */
void Image::subscriber_recieve_time(
        uint64_t _subscriber_recieve_time)
{
    m_subscriber_recieve_time = _subscriber_recieve_time;
}

/*!
 * @brief This function returns the value of member subscriber_recieve_time
 * @return Value of member subscriber_recieve_time
 */
uint64_t Image::subscriber_recieve_time() const
{
    return m_subscriber_recieve_time;
}

/*!
 * @brief This function returns a reference to member subscriber_recieve_time
 * @return Reference to member subscriber_recieve_time
 */
uint64_t& Image::subscriber_recieve_time()
{
    return m_subscriber_recieve_time;
}


/*!
 * @brief This function sets a value in member transport
 * @param _transport New value for member transport
 */
void Image::transport(
        uint8_t _transport)
{
    m_transport = _transport;
}

/*!
 * @brief This function returns the value of member transport
 * @return Value of member transport
 */
uint8_t Image::transport() const
{
    return m_transport;
}

/*!
 * @brief This function returns a reference to member transport
 * @return Reference to member transport
 */
uint8_t& Image::transport()
{
    return m_transport;
}


// Include auxiliary functions like for serializing/deserializing.
#include "ImageCdrAux.ipp"

