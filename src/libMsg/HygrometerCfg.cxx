// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HygrometerCfg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "HygrometerCfg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define HygrometerCfg_max_cdr_typesize 4ULL;
#define HygrometerCfg_max_key_cdr_typesize 0ULL;

HygrometerCfg::HygrometerCfg()
{
    // long m_mps
    m_mps = 0;

}

HygrometerCfg::~HygrometerCfg()
{
}

HygrometerCfg::HygrometerCfg(
        const HygrometerCfg& x)
{
    m_mps = x.m_mps;
}

HygrometerCfg::HygrometerCfg(
        HygrometerCfg&& x) noexcept 
{
    m_mps = x.m_mps;
}

HygrometerCfg& HygrometerCfg::operator =(
        const HygrometerCfg& x)
{

    m_mps = x.m_mps;

    return *this;
}

HygrometerCfg& HygrometerCfg::operator =(
        HygrometerCfg&& x) noexcept
{

    m_mps = x.m_mps;

    return *this;
}

bool HygrometerCfg::operator ==(
        const HygrometerCfg& x) const
{

    return (m_mps == x.m_mps);
}

bool HygrometerCfg::operator !=(
        const HygrometerCfg& x) const
{
    return !(*this == x);
}

size_t HygrometerCfg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HygrometerCfg_max_cdr_typesize;
}

size_t HygrometerCfg::getCdrSerializedSize(
        const HygrometerCfg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void HygrometerCfg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_mps;

}

void HygrometerCfg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_mps;
}

/*!
 * @brief This function sets a value in member mps
 * @param _mps New value for member mps
 */
void HygrometerCfg::mps(
        int32_t _mps)
{
    m_mps = _mps;
}

/*!
 * @brief This function returns the value of member mps
 * @return Value of member mps
 */
int32_t HygrometerCfg::mps() const
{
    return m_mps;
}

/*!
 * @brief This function returns a reference to member mps
 * @return Reference to member mps
 */
int32_t& HygrometerCfg::mps()
{
    return m_mps;
}



size_t HygrometerCfg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return HygrometerCfg_max_key_cdr_typesize;
}

bool HygrometerCfg::isKeyDefined()
{
    return false;
}

void HygrometerCfg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

