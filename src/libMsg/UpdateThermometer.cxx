// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UpdateThermometer.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UpdateThermometer.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define UpdateThermometer_max_cdr_typesize 32ULL;
#define UpdateThermometer_max_key_cdr_typesize 0ULL;

UpdateThermometer::UpdateThermometer()
{
    // long m_mps
    m_mps = 0;
    // long long m_t1
    m_t1 = 0;
    // long long m_t2
    m_t2 = 0;
    // long long m_t3
    m_t3 = 0;

}

UpdateThermometer::~UpdateThermometer()
{




}

UpdateThermometer::UpdateThermometer(
        const UpdateThermometer& x)
{
    m_mps = x.m_mps;
    m_t1 = x.m_t1;
    m_t2 = x.m_t2;
    m_t3 = x.m_t3;
}

UpdateThermometer::UpdateThermometer(
        UpdateThermometer&& x) noexcept 
{
    m_mps = x.m_mps;
    m_t1 = x.m_t1;
    m_t2 = x.m_t2;
    m_t3 = x.m_t3;
}

UpdateThermometer& UpdateThermometer::operator =(
        const UpdateThermometer& x)
{

    m_mps = x.m_mps;
    m_t1 = x.m_t1;
    m_t2 = x.m_t2;
    m_t3 = x.m_t3;

    return *this;
}

UpdateThermometer& UpdateThermometer::operator =(
        UpdateThermometer&& x) noexcept
{

    m_mps = x.m_mps;
    m_t1 = x.m_t1;
    m_t2 = x.m_t2;
    m_t3 = x.m_t3;

    return *this;
}

bool UpdateThermometer::operator ==(
        const UpdateThermometer& x) const
{

    return (m_mps == x.m_mps && m_t1 == x.m_t1 && m_t2 == x.m_t2 && m_t3 == x.m_t3);
}

bool UpdateThermometer::operator !=(
        const UpdateThermometer& x) const
{
    return !(*this == x);
}

size_t UpdateThermometer::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return UpdateThermometer_max_cdr_typesize;
}

size_t UpdateThermometer::getCdrSerializedSize(
        const UpdateThermometer& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void UpdateThermometer::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_mps;
    scdr << m_t1;
    scdr << m_t2;
    scdr << m_t3;

}

void UpdateThermometer::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_mps;
    dcdr >> m_t1;
    dcdr >> m_t2;
    dcdr >> m_t3;
}

/*!
 * @brief This function sets a value in member mps
 * @param _mps New value for member mps
 */
void UpdateThermometer::mps(
        int32_t _mps)
{
    m_mps = _mps;
}

/*!
 * @brief This function returns the value of member mps
 * @return Value of member mps
 */
int32_t UpdateThermometer::mps() const
{
    return m_mps;
}

/*!
 * @brief This function returns a reference to member mps
 * @return Reference to member mps
 */
int32_t& UpdateThermometer::mps()
{
    return m_mps;
}

/*!
 * @brief This function sets a value in member t1
 * @param _t1 New value for member t1
 */
void UpdateThermometer::t1(
        int64_t _t1)
{
    m_t1 = _t1;
}

/*!
 * @brief This function returns the value of member t1
 * @return Value of member t1
 */
int64_t UpdateThermometer::t1() const
{
    return m_t1;
}

/*!
 * @brief This function returns a reference to member t1
 * @return Reference to member t1
 */
int64_t& UpdateThermometer::t1()
{
    return m_t1;
}

/*!
 * @brief This function sets a value in member t2
 * @param _t2 New value for member t2
 */
void UpdateThermometer::t2(
        int64_t _t2)
{
    m_t2 = _t2;
}

/*!
 * @brief This function returns the value of member t2
 * @return Value of member t2
 */
int64_t UpdateThermometer::t2() const
{
    return m_t2;
}

/*!
 * @brief This function returns a reference to member t2
 * @return Reference to member t2
 */
int64_t& UpdateThermometer::t2()
{
    return m_t2;
}

/*!
 * @brief This function sets a value in member t3
 * @param _t3 New value for member t3
 */
void UpdateThermometer::t3(
        int64_t _t3)
{
    m_t3 = _t3;
}

/*!
 * @brief This function returns the value of member t3
 * @return Value of member t3
 */
int64_t UpdateThermometer::t3() const
{
    return m_t3;
}

/*!
 * @brief This function returns a reference to member t3
 * @return Reference to member t3
 */
int64_t& UpdateThermometer::t3()
{
    return m_t3;
}



size_t UpdateThermometer::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return UpdateThermometer_max_key_cdr_typesize;
}

bool UpdateThermometer::isKeyDefined()
{
    return false;
}

void UpdateThermometer::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

