// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UpdateThermometer.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UpdateThermometer.h"
#include "UpdateThermometerTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define UpdateThermometer_max_cdr_typesize 24ULL;
#define UpdateThermometer_max_key_cdr_typesize 0ULL;

UpdateThermometer::UpdateThermometer()
{
    // unsigned long long m_subscriber_initalize_time
    m_subscriber_initalize_time = 0;
    // unsigned long long m_publisher_send_time
    m_publisher_send_time = 0;
    // unsigned long long m_subscriber_recieve_time
    m_subscriber_recieve_time = 0;

    // Just to register all known types
    registerUpdateThermometerTypes();
}

UpdateThermometer::~UpdateThermometer()
{



}

UpdateThermometer::UpdateThermometer(
        const UpdateThermometer& x)
{
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
}

UpdateThermometer::UpdateThermometer(
        UpdateThermometer&& x) noexcept 
{
    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;
}

UpdateThermometer& UpdateThermometer::operator =(
        const UpdateThermometer& x)
{

    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;

    return *this;
}

UpdateThermometer& UpdateThermometer::operator =(
        UpdateThermometer&& x) noexcept
{

    m_subscriber_initalize_time = x.m_subscriber_initalize_time;
    m_publisher_send_time = x.m_publisher_send_time;
    m_subscriber_recieve_time = x.m_subscriber_recieve_time;

    return *this;
}

bool UpdateThermometer::operator ==(
        const UpdateThermometer& x) const
{

    return (m_subscriber_initalize_time == x.m_subscriber_initalize_time && m_publisher_send_time == x.m_publisher_send_time && m_subscriber_recieve_time == x.m_subscriber_recieve_time);
}

bool UpdateThermometer::operator !=(
        const UpdateThermometer& x) const
{
    return !(*this == x);
}

size_t UpdateThermometer::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return UpdateThermometer_max_cdr_typesize;
}

size_t UpdateThermometer::getCdrSerializedSize(
        const UpdateThermometer& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void UpdateThermometer::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_subscriber_initalize_time;
    scdr << m_publisher_send_time;
    scdr << m_subscriber_recieve_time;

}

void UpdateThermometer::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_subscriber_initalize_time;
    dcdr >> m_publisher_send_time;
    dcdr >> m_subscriber_recieve_time;
}

/*!
 * @brief This function sets a value in member subscriber_initalize_time
 * @param _subscriber_initalize_time New value for member subscriber_initalize_time
 */
void UpdateThermometer::subscriber_initalize_time(
        uint64_t _subscriber_initalize_time)
{
    m_subscriber_initalize_time = _subscriber_initalize_time;
}

/*!
 * @brief This function returns the value of member subscriber_initalize_time
 * @return Value of member subscriber_initalize_time
 */
uint64_t UpdateThermometer::subscriber_initalize_time() const
{
    return m_subscriber_initalize_time;
}

/*!
 * @brief This function returns a reference to member subscriber_initalize_time
 * @return Reference to member subscriber_initalize_time
 */
uint64_t& UpdateThermometer::subscriber_initalize_time()
{
    return m_subscriber_initalize_time;
}

/*!
 * @brief This function sets a value in member publisher_send_time
 * @param _publisher_send_time New value for member publisher_send_time
 */
void UpdateThermometer::publisher_send_time(
        uint64_t _publisher_send_time)
{
    m_publisher_send_time = _publisher_send_time;
}

/*!
 * @brief This function returns the value of member publisher_send_time
 * @return Value of member publisher_send_time
 */
uint64_t UpdateThermometer::publisher_send_time() const
{
    return m_publisher_send_time;
}

/*!
 * @brief This function returns a reference to member publisher_send_time
 * @return Reference to member publisher_send_time
 */
uint64_t& UpdateThermometer::publisher_send_time()
{
    return m_publisher_send_time;
}

/*!
 * @brief This function sets a value in member subscriber_recieve_time
 * @param _subscriber_recieve_time New value for member subscriber_recieve_time
 */
void UpdateThermometer::subscriber_recieve_time(
        uint64_t _subscriber_recieve_time)
{
    m_subscriber_recieve_time = _subscriber_recieve_time;
}

/*!
 * @brief This function returns the value of member subscriber_recieve_time
 * @return Value of member subscriber_recieve_time
 */
uint64_t UpdateThermometer::subscriber_recieve_time() const
{
    return m_subscriber_recieve_time;
}

/*!
 * @brief This function returns a reference to member subscriber_recieve_time
 * @return Reference to member subscriber_recieve_time
 */
uint64_t& UpdateThermometer::subscriber_recieve_time()
{
    return m_subscriber_recieve_time;
}



size_t UpdateThermometer::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return UpdateThermometer_max_key_cdr_typesize;
}

bool UpdateThermometer::isKeyDefined()
{
    return false;
}

void UpdateThermometer::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

