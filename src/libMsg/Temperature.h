// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Temperature.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_TEMPERATURE_H_
#define _FAST_DDS_GENERATED_TEMPERATURE_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TEMPERATURE_SOURCE)
#define TEMPERATURE_DllAPI __declspec( dllexport )
#else
#define TEMPERATURE_DllAPI __declspec( dllimport )
#endif // TEMPERATURE_SOURCE
#else
#define TEMPERATURE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TEMPERATURE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure Temperature defined by the user in the IDL file.
 * @ingroup Temperature
 */
class Temperature
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Temperature();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Temperature();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature(
            const Temperature& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature(
            Temperature&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature& operator =(
            const Temperature& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Temperature that will be copied.
     */
    eProsima_user_DllExport Temperature& operator =(
            Temperature&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Temperature object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Temperature& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Temperature object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Temperature& x) const;

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();


    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    eProsima_user_DllExport void temperature(
            int32_t _temperature);

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    eProsima_user_DllExport int32_t temperature() const;

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport int32_t& temperature();


    /*!
     * @brief This function sets a value in member subscriber_initalize_time
     * @param _subscriber_initalize_time New value for member subscriber_initalize_time
     */
    eProsima_user_DllExport void subscriber_initalize_time(
            uint64_t _subscriber_initalize_time);

    /*!
     * @brief This function returns the value of member subscriber_initalize_time
     * @return Value of member subscriber_initalize_time
     */
    eProsima_user_DllExport uint64_t subscriber_initalize_time() const;

    /*!
     * @brief This function returns a reference to member subscriber_initalize_time
     * @return Reference to member subscriber_initalize_time
     */
    eProsima_user_DllExport uint64_t& subscriber_initalize_time();


    /*!
     * @brief This function sets a value in member publisher_send_time
     * @param _publisher_send_time New value for member publisher_send_time
     */
    eProsima_user_DllExport void publisher_send_time(
            uint64_t _publisher_send_time);

    /*!
     * @brief This function returns the value of member publisher_send_time
     * @return Value of member publisher_send_time
     */
    eProsima_user_DllExport uint64_t publisher_send_time() const;

    /*!
     * @brief This function returns a reference to member publisher_send_time
     * @return Reference to member publisher_send_time
     */
    eProsima_user_DllExport uint64_t& publisher_send_time();


    /*!
     * @brief This function sets a value in member subscriber_recieve_time
     * @param _subscriber_recieve_time New value for member subscriber_recieve_time
     */
    eProsima_user_DllExport void subscriber_recieve_time(
            uint64_t _subscriber_recieve_time);

    /*!
     * @brief This function returns the value of member subscriber_recieve_time
     * @return Value of member subscriber_recieve_time
     */
    eProsima_user_DllExport uint64_t subscriber_recieve_time() const;

    /*!
     * @brief This function returns a reference to member subscriber_recieve_time
     * @return Reference to member subscriber_recieve_time
     */
    eProsima_user_DllExport uint64_t& subscriber_recieve_time();

private:

    uint32_t m_index{0};
    int32_t m_temperature{0};
    uint64_t m_subscriber_initalize_time{0};
    uint64_t m_publisher_send_time{0};
    uint64_t m_subscriber_recieve_time{0};

};

#endif // _FAST_DDS_GENERATED_TEMPERATURE_H_



